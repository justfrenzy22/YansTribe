@startuml

package "core" {
    enum FriendStatus
    enum MediaType
    enum Role

    class Chat {
        - chat_id : Guid
        - user_1_id : Guid
        - user_2_id : Guid
        - created_at : DateTime

        + Chat(chat_id : Guid, user_1_id : Guid, user_2_id : Guid, created_at : DateTime)
        + chat_id : Guid
        + user_1_id : Guid
        + user_2_id : Guid
        + created_at : DateTime
    }

    class Comment {
        - comment_id : Guid
        - post_id : Guid
        - commenter_id : Guid
        - parent_id : Guid
        - content : string
        - created_at : DateTime

        + Comment(comment_id : Guid, post_id : Guid, commenter_id : Guid, parent_id : Guid, content : string, created_at : DateTime)
    }

    class Friend {
        - friendship_id : Guid
        - user_1_id : Guid
        - user_2_id : Guid
        - status : FriendStatus
        - created_at : DateTime

        + Friend(friendship_id : Guid, user_1_id : Guid, user_2_id : Guid, status : FriendStatus, created_at : DateTime)
    }

    class Message {
        - message_id : Guid
        - chat_id : Guid
        - sender_id : Guid
        - content : string
        - send_at : DateTime

        + Message(message_id : Guid, chat_id : Guid, sender_id : Guid, content : string, send_at : DateTime)
    }

    class Post {
        - _edited : bool
        - _edited_at : DateTime
        - _like_count : int
        - _comment_count : int
        - _user: BaseUser
        - _is_liked_requester: bool
        + Post(post_id: Guid, content: string, edited: bool, edited_at: DateTime, like_count: int, comment_count: int, is_liked_requester: bool, user: BaseUser)
        + edited_at: DateTime
        + edited: bool
        + like_count: int
        + comment_count: int
        + is_liked_requester: bool
        + user: BaseUser
    }
    Post --|> BasePost
    Post --|> BaseUser

    class BasePost {
        - _post_id: Guid
        - _media: List<Media>
        - _content: string
        - _created_at: DateTime
        + BasePost(post_id: Guid, content: string, created_at: DateTime)
        + post_id: Guid
        + media: List<PostMedia>
        + content: string
        + created_at: DateTime
        + AddMedia(media: PostMedia): void
    }
    BasePost ..> PostMedia

    class PostCreateEntity {
        - _user_id: Guid
        + PostCreateEntity(post_id: Guid, user_id: Guid, content: string, created_at: DateTime)
        user_id: Guid
    }
    PostCreateEntity --|> BasePost

    class PostMedia {
        - post_id : Guid
        - media_id : Guid
        - media_type : MediaType
        - media_source : string

        + PostMedia(post_id : Guid, media_id : Guid, media_type : MediaType, media_source : string)
    }

    class Story {
        - story_id : Guid
        - user_id : Guid
        - media_type : MediaType
        - media_source : string
        - created_at : DateTime
        - expires_at : DateTime

        + Story(story_id : Guid, user_id : Guid, media_type : MediaType, media_source : string, created_at : DateTime, expires_at : DateTime)
    }

    class User {
        - user_id : Guid
        - username : string
        - email : string
        - password : string
        - full_name : string
        - bio : string
        - profile_picture_source : string?
        - location : string
        - website : string
        - is_private : bool
        - created_at : DateTime
        - role : Role

        + User(...)
    }

    class BaseUser {
        - _user_id: Guid
        - _username: string
        - _pfp_src: string
        - _is_private: bool
        - _notifications: Notifications

        + BaseUser(user_id: Guid, username: string, pfp_src: string, is_private: bool)
        + AddNotifications(notifications: Notifications): void
        + notifications: Notifications { get; }
        + user_id: Guid { get; }
        + username: string {get; }
        + pfp_src: string { get; }
        + is_private: bool { get; }
    }
    BaseUser ..> Notifications


    class SafeUser {
        - _bio: string
        - _created_at: DateTime
        - _email: string
        - _full_name: string
        - _location: string
        - _role: Role
        - _website: string

        + SafeUser(user_id: Guid, username: string, pfp_src: string, email: string, full_name: string, bio: string, location: string, website: string, is_private: bool, created_at: DateTime, role: Role)
        + bio: string
        + created_at: DateTime
        + email: string
        + full_name: string
        + location: string
        + role: Role
        + website: string
        + RoleToString(role: Role): string
    }
    SafeUser --|> BaseUser
    SafeUser ..> Role

    class ProfileUser {
        - _friends: List<FriendUser>
        - _friends_num: int
        - _is_friend: bool
        - _is_self: bool
        - _posts: List<Post>
        - _friendship_status: FriendStatus?
        - _request_direction: string
        - _stories: string

        + ProfileUser(user_id: Guid, username: string, pfp_src: string, email: string, full_name: string, bio: string, location: string, website: string, is_private: bool, created_at: DateTime, role: Role, is_self: bool, is_friend: bool, friends_num: int, friendship_status?: friendship_status, request_direction: string)
        + friends: List<FriendUser>
        + friends_num: int
        + is_friend: bool
        + is_self: bool
        + posts: List<Post>
        + friendship_status: FriendStatus?
        + request_direction: string
        + AddFriend(friend: FriendUser) : void
        + AddFriends(friends: List<FriendUser>): void
        + AddPost(post: Post): void
        + AddPosts(posts: List<Post>): void
        + AddStories(stories: List<Story>): void
    }
    ProfileUser ..> FriendUser
    ProfileUser --|> SafeUser
    ProfileUser ..> Post
    ProfileUser ..> Role
    ProfileUser ..> Story

    class UserMapper {
    + map(user: BaseUser) : BaseUser
    }

    class FriendUser {
        - _status: FriendStatus
        + FriendUser(status: FriendStatus, user_id: Guid, username: string, pfp_src: string, email: string, full_name: string, bio: string, location: string, website: string, is_private: bool, created_at: DateTime, role: Role, is_self: bool, is_friend: bool, friends_num: int, friendship_status?: friendship_status, request_direction: string)
        + status: FriendStatus
    }
    FriendUser --|> BaseUser
    FriendUser ..> FriendStatus

    class FullUser {
        - _password: string
        + FullUser (user_id: Guid, username: string, pfp_src: string, email: string, full_name: string, bio: string, location: string, website: string, is_private: bool, created_at: DateTime, role: Role, password: string)
        + password: string
        + HashPassword(hash_password: string): void
    }
    FullUser --|> SafeUser

    class Notifications {
        - _friend_notifications: List<FriendNotification>?
        + Notifications(friend_notifications: List<FriendNotification>?)
        + FriendNotifications: List<FriendNotification>
    }
    Notifications ..> FriendNotification

    class FriendNotification {
        - _sender_id: Guid
        - _username: string
        - _pfp_src: string
        - _request_sent_at: DateTime
        + FriendNotification(sender_id: Guid, username: string, pfp_src: string, request_sent_at: DateTime)
        + sender_id: Guid
        + username: string
        + pfp_src: string
        + request_sent_at: DateTime
    }

    enum Role {
        User,
        Admin,
        SuperAdmin
    }

    enum MediaType
    {
        image,
        video
    }

    enum FriendStatus
    {
        pending,
        accepted,
        rejected,
        blocked
    }

    Friend ..> FriendStatus

    Post ..> PostMedia

    User ..> Role

    BaseUser ..> Notifications

    Story ..> MediaType
}

package "DAL" {
    interface IAdminRepo
    interface IBaseUserRepo
    interface IDBRepo
    interface IPostRepo
    interface IUserRepo

    class AdminRepo {
        +GetAllUsersAsync(admin_id: Guid): Task<List<User>?>
    }

    class BaseRepo {
    }

    class BaseUserRepo {
        +ParseRole(string: value): Role
        +ParseStringRole(Role: role): string
    }

    class DBRepo {
        +nonQuery(string: query, Dictionary<string, object>?: parameters): Task<int>
        +scalar(string: query, Dictionary<string, object>?: parameters): Task<object?>
        +reader(string: query, Dictionary<string, object>?: parameters): Task<DataTable>
    }

    class PostRepo {
        +CreatePost(Post: post): Task<int>
        +GetInitPostsById(Guid: user_id): Task<List<Post>>
    }

    class UserRepo {
        +RegisterUser(User: user): Task<Guid>
        +GetUserById(Guid: user_id): Task<User?>
        +GetUserByEmail(string: email): Task<User?>
        +ValidateUserByEmail(string: email):Task<User?>
        +ChangeRole(Guid: user_id, string: role): Task<bool>
        +GetUserEssentials(Guid: user_id): Task<User?>
        +GetUserIdByUsername(string: username): Task<Guid?>
        +GetUserByUsername(string: username):Task<User?>
        +GetUserProfileById(Guid: user_id): Task<User?>
    }


    class AdminQuery {
        +get_admin_login(): string
        +get_all_users(): string
    }

    class CommentQuery {
        +get_init_comments_by_post_id(): string
        +add_comment(): string
        +add_comment(): string
        +add_comment_like(): string
        +delete_comment_like(): string
        +delete_comment_by_id(): string

    }

    class PostQuery {
        +get_post_by_id(): string
        +add_post(): string
        +add_post_like(): string
        +add_post_media(): string
        +delete_post_like(): string
        +get_first_10_posts_by_user_id(): string
    }

    class UserQuery {
        +add_user(): string
        +get_user_by_id(): string
        +get_user_profile_by_id(): string
        +get_user_essentials_by_id(): string
        +get_user_by_username(): string
        +get_user_by_email(): string
        +check_user_by_username(): string
        +get_user_by_email_and_password(): string
        +get_last_insert_id(): string
        +delete_user(): string
        +get_last_id(): string
        +get_users(): string
        +get_role_by_id(): string
        +get_standard_users(): string
        +update_user_role(): string
    }

    class userMapper

    class EssentialsUserDTO
    class MediaJsonDTO
    class ProfileUserDTO
    class PublicUserDTO
    class UserDTO

    AdminRepo --|> BaseUserRepo
    AdminRepo ..|> IAdminRepo
    AdminRepo ..> IDBRepo
    AdminRepo ..> AdminQuery
    AdminRepo ..> UserQuery
    AdminRepo ..> UserMapper
    AdminRepo ..> UserDTO
    AdminRepo ..> core.User

    BaseRepo ..> IDBRepo

    BaseUserRepo --|> BaseRepo
    BaseUserRepo ..> core.Role

    DBRepo ..|> IDBRepo

    PostRepo --|> BaseRepo
    PostRepo ..|> IPostRepo
    PostRepo ..> IDBRepo
    PostRepo ..> PostQuery
    PostRepo ..> MediaJsonDTO
    PostRepo ..> core.Role
    PostRepo ..> core.Post

    UserRepo --|> BaseUserRepo
    UserRepo ..|> IUserRepo
    UserRepo ..> UserQuery
    UserRepo ..> UserMapper
    UserRepo ..> EssentialsUserDTO
    UserRepo ..> PublicUserDTO
    UserRepo ..> UserDTO
    UserRepo ..> core.User
}

package "BLL" {
    interface IAdminService
    interface IAuthService
    interface IFileService
    interface IHashService
    interface IPostService
    interface IUserService

    class AdminService {
        +ValidateLogin(email: string, password: string): Task<string?>
        +AuthAdmin(string: token) : VerifyTokenRes
        +AuthSuperAdmin(string: token): Task<VerifySuperAdminDTO>
        +GetUsersAsync(string: admin_id) : Task<List<User>?>
        +ChangeRole(string: user_id, string: role) Task<string>
    }
    class AuthService {
        +VerifyTokenAsync(token: string, isAdmin: bool): VerifyTokenRes
        +GenerateJwtToken(string: user_id, bool: isAdmin): string
    }
    class FileService {
        +Upload(post_id: Guid, file: IFormFile): Task<PostMedia>
    }
    class HashService {
        +hash(pass: string): string
    }
    class PostService {
        +CreatePost(post: Post, files: List<IFormFile>?): Task<int?>
    }
    class UserService {
        +ValidateUser(email: string, password: string): Task<string>
        +RegisterUser(user: User): Task<Guid?>
        +GetUserById(Guid: user_id): Task<User?>
        +FetchUserProfile(string username): Task<UserProfileDto?>
        AuthUser(string token): VerifyTokenRes
    }

    class UserProfileDto {
    }

     class VerifySuperAdminDTO
    {
    }

    class VerifyTokenRes
    {
    }

    AdminService ..|> IAdminService
    AdminService ..> DAL.IUserRepo
    AdminService ..> DAL.IAdminRepo
    AdminService ..> IHashService
    AdminService ..> IAuthService
    AdminService ..> VerifySuperAdminDTO
    AdminService ..> core.User
    AdminService ..> core.Role

    AuthService ..|> IAuthService
    AuthService ..> IConfiguration
    AuthService ..> VerifyTokenRes

    FileService ..|> IFileService
    FileService ..> core.PostMedia

    HashService ..|> IHashService

    PostService ..|> IPostService
    PostService ..> DAL.IPostRepo
    PostService ..> IFileService
    PostService ..> core.Post
    PostService ..> core.PostMedia

    UserService ..|> IUserService
    UserService ..> DAL.IUserRepo
    UserService ..> DAL.IPostRepo
    UserService ..> IHashService
    UserService ..> IAuthService
    UserService ..> UserProfileDto
    UserService ..> VerifyTokenRes
    UserService ..> core.User
    UserService ..> core.Post

}


@enduml