@startuml

package "core" {
    enum FriendStatus
    enum MediaType
    enum Role

    class Chat {
        - chat_id : Guid
        - user_1_id : Guid
        - user_2_id : Guid
        - created_at : DateTime

        + Chat(chat_id : Guid, user_1_id : Guid, user_2_id : Guid, created_at : DateTime)
        + chat_id : Guid
        + user_1_id : Guid
        + user_2_id : Guid
        + created_at : DateTime
    }

    class Comment {
        - comment_id : Guid
        - post_id : Guid
        - commenter_id : Guid
        - parent_id : Guid
        - content : string
        - created_at : DateTime

        + Comment(comment_id : Guid, post_id : Guid, commenter_id : Guid, parent_id : Guid, content : string, created_at : DateTime)
    }

    class CommentLike {
        - user_id : Guid
        - comment_id : Guid
        - created_at : DateTime

        + CommentLike(user_id : Guid, comment_id : Guid, created_at : DateTime)
        + user_id : Guid
        + comment_id : Guid
        + created_at : DateTime
    }

    class Friend {
        - friendship_id : Guid
        - user_1_id : Guid
        - user_2_id : Guid
        - status : FriendStatus
        - created_at : DateTime

        + Friend(friendship_id : Guid, user_1_id : Guid, user_2_id : Guid, status : FriendStatus, created_at : DateTime)
    }

    class Message {
        - message_id : Guid
        - chat_id : Guid
        - sender_id : Guid
        - content : string
        - send_at : DateTime

        + Message(message_id : Guid, chat_id : Guid, sender_id : Guid, content : string, send_at : DateTime)
    }

    class Post {
        - post_id : Guid
        - user_id : Guid
        - media : List<PostMedia>
        - content : string
        - edited : bool
        - edited_at : DateTime
        - created_at : DateTime
        - like_count : int
        - comment_count : int

        + Post(...)
    }

    class PostLike {
        - user_id : Guid
        - post_id : Guid
        - created_at : DateTime

        + PostLike(user_id : Guid, post_id : Guid, issuer_id : int, created_at : DateTime)
    }

    class PostMedia {
        - post_id : Guid
        - media_id : Guid
        - media_type : MediaType
        - media_source : string

        + PostMedia(post_id : Guid, media_id : Guid, media_type : MediaType, media_source : string)
    }

    class Story {
        - story_id : Guid
        - user_id : Guid
        - media_type : MediaType
        - media_source : string
        - created_at : DateTime
        - expires_at : DateTime

        + Story(story_id : Guid, user_id : Guid, media_type : MediaType, media_source : string, created_at : DateTime, expires_at : DateTime)
    }

    class User {
        - user_id : Guid
        - username : string
        - email : string
        - password : string
        - full_name : string
        - bio : string
        - profile_picture_source : string?
        - location : string
        - website : string
        - is_private : bool
        - created_at : DateTime
        - role : Role

        + User(...)
    }

    Friend ..> FriendStatus

    Post ..> PostMedia

    User ..> Role

    Story ..> MediaType
}

package "DAL" {
    interface IAdminRepo
    interface IBaseUserRepo
    interface IDBRepo
    interface IPostRepo
    interface IUserRepo

    class AdminRepo {
        +GetAllUsersAsync(admin_id: Guid): Task<List<User>?>
    }

    class BaseRepo {
    }

    class BaseUserRepo {
        +ParseRole(string: value): Role
        +ParseStringRole(Role: role): string
    }

    class DBRepo {
        +nonQuery(string: query, Dictionary<string, object>?: parameters): Task<int>
        +scalar(string: query, Dictionary<string, object>?: parameters): Task<object?>
        +reader(string: query, Dictionary<string, object>?: parameters): Task<DataTable>
    }

    class PostRepo {
        +CreatePost(Post: post): Task<int>
        +GetInitPostsById(Guid: user_id): Task<List<Post>>
    }

    class UserRepo {
        +RegisterUser(User: user): Task<Guid>
        +GetUserById(Guid: user_id): Task<User?>
        +GetUserByEmail(string: email): Task<User?>
        +ValidateUserByEmail(string: email):Task<User?>
        +ChangeRole(Guid: user_id, string: role): Task<bool>
        +GetUserEssentials(Guid: user_id): Task<User?>
        +GetUserIdByUsername(string: username): Task<Guid?>
        +GetUserByUsername(string: username):Task<User?>
        +GetUserProfileById(Guid: user_id): Task<User?>
    }


    class AdminQuery {
        +get_admin_login(): string
        +get_all_users(): string
    }

    class CommentQuery {
        +get_init_comments_by_post_id(): string
        +add_comment(): string
        +add_comment(): string
        +add_comment_like(): string
        +delete_comment_like(): string
        +delete_comment_by_id(): string

    }

    class PostQuery {
        +get_post_by_id(): string
        +add_post(): string
        +add_post_like(): string
        +add_post_media(): string
        +delete_post_like(): string
        +get_first_10_posts_by_user_id(): string
    }

    class UserQuery {
        +add_user(): string
        +get_user_by_id(): string
        +get_user_profile_by_id(): string
        +get_user_essentials_by_id(): string
        +get_user_by_username(): string
        +get_user_by_email(): string
        +check_user_by_username(): string
        +get_user_by_email_and_password(): string
        +get_last_insert_id(): string
        +delete_user(): string
        +get_last_id(): string
        +get_users(): string
        +get_role_by_id(): string
        +get_standard_users(): string
        +update_user_role(): string
    }

    class userMapper

    class EssentialsUserDTO
    class MediaJsonDTO
    class ProfileUserDTO
    class PublicUserDTO
    class UserDTO

    AdminRepo --|> BaseUserRepo
    AdminRepo ..|> IAdminRepo
    AdminRepo ..> IDBRepo
    AdminRepo ..> AdminQuery
    AdminRepo ..> UserQuery
    AdminRepo ..> UserMapper
    AdminRepo ..> UserDTO
    AdminRepo ..> core.User

    BaseRepo ..> IDBRepo

    BaseUserRepo --|> BaseRepo
    BaseUserRepo ..> core.Role

    DBRepo ..|> IDBRepo

    PostRepo --|> BaseRepo
    PostRepo ..|> IPostRepo
    PostRepo ..> IDBRepo
    PostRepo ..> PostQuery
    PostRepo ..> MediaJsonDTO
    PostRepo ..> core.Role
    PostRepo ..> core.Post

    UserRepo --|> BaseUserRepo
    UserRepo ..|> IUserRepo
    UserRepo ..> UserQuery
    UserRepo ..> UserMapper
    UserRepo ..> EssentialsUserDTO
    UserRepo ..> PublicUserDTO
    UserRepo ..> UserDTO
    UserRepo ..> core.User

    UserMapper ..> EssentialsUserDTO
    UserMapper ..> PublicUserDTO
    UserMapper ..> UserDTO
    UserMapper ..> core.Mapper
    UserMapper ..> core.User

}

package "BLL" {
    interface IAdminService
    interface IAuthService
    interface IFileService
    interface IHashService
    interface IPostService
    interface IUserService

    class AdminService {
        +ValidateLogin(email: string, password: string): Task<string?>
        +AuthAdmin(string: token) : VerifyTokenRes
        +AuthSuperAdmin(string: token): Task<VerifySuperAdminDTO>
        +GetUsersAsync(string: admin_id) : Task<List<User>?>
        +ChangeRole(string: user_id, string: role) Task<string>
    }
    class AuthService {
        +VerifyTokenAsync(token: string, isAdmin: bool): VerifyTokenRes
        +GenerateJwtToken(string: user_id, bool: isAdmin): string
    }
    class FileService {
        +Upload(post_id: Guid, file: IFormFile): Task<PostMedia>
    }
    class HashService {
        +hash(pass: string): string
    }
    class PostService {
        +CreatePost(post: Post, files: List<IFormFile>?): Task<int?>
    }
    class UserService {
        +ValidateUser(email: string, password: string): Task<string>
        +RegisterUser(user: User): Task<Guid?>
        +GetUserById(Guid: user_id): Task<User?>
        +FetchUserProfile(string username): Task<UserProfileDto?>
        AuthUser(string token): VerifyTokenRes
    }

    class UserProfileDto {
    }

     class VerifySuperAdminDTO
    {
    }

    class VerifyTokenRes
    {
    }

    AdminService ..|> IAdminService
    AdminService ..> DAL.IUserRepo
    AdminService ..> DAL.IAdminRepo
    AdminService ..> IHashService
    AdminService ..> IAuthService
    AdminService ..> VerifySuperAdminDTO
    AdminService ..> core.User
    AdminService ..> core.Role

    AuthService ..|> IAuthService
    AuthService ..> IConfiguration
    AuthService ..> VerifyTokenRes

    FileService ..|> IFileService
    FileService ..> core.PostMedia

    HashService ..|> IHashService

    PostService ..|> IPostService
    PostService ..> DAL.IPostRepo
    PostService ..> IFileService
    PostService ..> core.Post
    PostService ..> core.PostMedia

    UserService ..|> IUserService
    UserService ..> DAL.IUserRepo
    UserService ..> DAL.IPostRepo
    UserService ..> IHashService
    UserService ..> IAuthService
    UserService ..> UserProfileDto
    UserService ..> VerifyTokenRes
    UserService ..> core.User
    UserService ..> core.Post

}


package "PL" {
    class AdminAuth {
        + AdminAuth(IAdminService service)
        + OnAuthorizationAsync(AuthorizationFilterContext context): Task
    }

    class ExceptionMiddleware {
        + ExceptionMiddleware(RequestDelegate next, ICompositeViewEngine engine, IServiceProvider provider)
        + InvokeAsync(HttpContext context): Task
        + HandleExceptionAsync(HttpContext context, Exception ex): Task
    }

    class SuperAdminAuth {
        + SuperAdminAuth(RequestDelegate next, IAdminService service)
        + InvokeAsync(HttpContext context): Task
    }

    class SuperAdminAuthFilter {
        + SuperAdminAuthFilter(IAdminService service)
        + OnActionExecutionAsync(ActionExecutingContext context, ActionExecutionDelegate next): Task
    }

    class UserAuth {
        + UserAuth(UserView view, IUserService service)
        + OnAuthorizationAsync(AuthorizationFilterContext context): Task
    }

    class AdminChangeRoleViewModel
    class AdminLoginViewModel
    class BaseUserViewModel
    class CreatePostViewModel
    class ErrorViewModel
    class GetUserViewModel
    class PrivateProfileViewModel
    class PublicProfileViewModel
    class PublicUserViewModel
    class UserLoginViewModel
    class UserRegisterViewModel

    class AdminController {
        +ChangeRole(AdminChangeRoleViewModel model) : Task<IActionResult>
        +getLogin() : IActionResult
        +Login(AdminLoginViewModel model) : Task<IActionResult>
        +Index() : Task<IActionResult>
        +error() : IActionResult
    }

    class BaseController {
        +Index(): IActionResult
    }

    class HomeController {
        +Index(): IActionResult
        +Register(): IActionResult
        +Privacy(): IActionResult
        +Error(): IActionResult
    }

    class PostController {
        +CreatePost(CreatePostViewModel: model): Task<IActionResult>
    }


    class UserController {
        +Index(): IActionResult
        +GetUserById(): Task<IActionResult>
        +GetUserProfile(): Task<IActionResult>
        +Login(): Task<IActionResult>
        +Register(): Task<IActionResult>
    }

    AdminController --|> Controller
    AdminController ..> BLL.IAdminService
    AdminController ..> SuperAdminAuthFilter
    AdminController ..> AdminAuth
    AdminController ..> AdminChangeRoleViewModel
    AdminController ..> core.User

    PostController --|> Controller
    PostController ..> BLL.IPostService
    PostController ..> PostView
    PostController ..> core.Post

    UserController --|> Controller
    UserController ..> UserView
    UserController ..> BLL.IUserService
    UserController ..> core.User
    UserController ..> BaseUserViewModel
    UserController ..> UserAuth
    UserController ..> UserProfileDto
    UserController ..> PrivateProfileViewModel
    UserControl ..> PublicProfileViewModel

    AdminAuth --|> Attribute
    AdminAuth ..|> IAsyncAuthorizationFilter
    AdminAuth ..> BLL.IAdminService
    AdminAuth ..> BLL.VerifyTokenRes

    SuperAdminAuthFilter --|> IAsyncActionFilter
    SuperAdminAuthFilter ..> BLL.IAdminService

    UserAuth --|> Attribute
    UserAuth ..|> IAsyncAuthorizationFilter
    UserAuth ..> UserView

}


@enduml